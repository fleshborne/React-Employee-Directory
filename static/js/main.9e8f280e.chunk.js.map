{"version":3,"sources":["components/Header.js","components/TableData.js","components/TableHeader.js","components/Table.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","TableData","Ninjas","map","ninja","key","id","scope","role","src","image","name","email","village","TableHeader","Table","striped","bordered","hover","variant","React","Component","Search","htmlFor","onChange","this","props","handleInputChange","value","search","type","placeholder","style","textAlign","App","state","event","setState","target","Container","Row","Col","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAWeA,MATf,WACE,OACE,yBAAKC,UAAU,UACb,+CACA,sD,eCFS,SAASC,IACtB,OACE,2BAAOD,UAAU,aACdE,EAAOC,KAAI,SAACC,GAAD,OACV,wBAAIC,IAAKD,EAAME,IACb,wBAAIC,MAAM,OAAOH,EAAMI,MACvB,4BAAKJ,EAAME,IACX,4BACE,yBAAKG,IAAKL,EAAMM,SAElB,4BAAKN,EAAMI,MACX,4BAAKJ,EAAMO,MACX,4BAAKP,EAAMQ,OACX,4BAAKR,EAAMS,cCfN,SAASC,IACtB,OACE,2BAAOd,UAAU,eACf,4BACE,6BACA,kCACA,qCACA,oCACA,oCACA,qCACA,yC,ICYOe,E,uKAhBX,OACE,kBAAC,IAAD,CACEC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,QAAQ,OACRnB,UAAU,oBAEV,kBAACc,EAAD,MAEA,kBAACb,EAAD,W,GAZYmB,IAAMC,WCoBXC,E,uKArBX,OACE,8BACE,yBAAKtB,UAAU,iCACb,2BAAOuB,QAAQ,UAAf,sBACA,2BACEC,SAAUC,KAAKC,MAAMC,kBACrBC,MAAOH,KAAKC,MAAMG,OAClBlB,KAAK,SACLmB,KAAK,OACL9B,UAAU,eACV+B,YAAY,SACZzB,GAAG,SACH0B,MAAO,CAAEC,UAAW,YAEtB,mC,GAhBWb,IAAMC,W,wBCoCZa,E,4MA3BbC,MAAQ,CACNN,OAAQ,I,EAEVF,kBAAoB,SAACS,GACnB,EAAKC,SAAS,CAAER,OAAQO,EAAME,OAAOV,S,uDAIrC,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE2B,kBAAmBF,KAAKE,kBACxBE,OAAQJ,KAAKU,MAAMN,SAErB,kBAACU,EAAA,EAAD,CAAWvC,UAAU,WACnB,kBAACwC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOC,KAAMA,EAAMb,OAAQJ,KAAKU,MAAMN,iB,GAnBlCT,IAAMC,WCCJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9e8f280e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className='header'>\r\n      <h1>Squad Directory</h1>\r\n      <p>Check out these Ninja</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n// import TableRow from 'react-bootstrap/Row';\r\nimport Ninjas from '../data/employeeData.json';\r\n\r\nexport default function TableData() {\r\n  return (\r\n    <tbody className='ninjaData'>\r\n      {Ninjas.map((ninja) => (\r\n        <tr key={ninja.id}>\r\n          <th scope='row'>{ninja.role}</th>\r\n          <td>{ninja.id}</td>\r\n          <td>\r\n            <img src={ninja.image}></img>\r\n          </td>\r\n          <td>{ninja.role}</td>\r\n          <td>{ninja.name}</td>\r\n          <td>{ninja.email}</td>\r\n          <td>{ninja.village}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n\r\n// {\r\n//     \"id\": 1,\r\n//     \"image\": \"https://gyazo.com/49e25be87b1fb5e65e02717afc4b6048.png\",\r\n//     \"role\": \"Hokage\",\r\n//     \"name\": \"Tsunade Senju\",\r\n//     \"email\": \"Senju@emailthis.com\",\r\n//     \"village\": \"Konohagakure\"\r\n//   },\r\n","import React from 'react';\r\n\r\nexport default function TableHeader() {\r\n  return (\r\n    <thead className='tableHeader'>\r\n      <tr>\r\n        <th></th>\r\n        <th>Id</th>\r\n        <th>Image</th>\r\n        <th>Role</th>\r\n        <th>Name</th>\r\n        <th>Email</th>\r\n        <th>Village</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n}\r\n\r\n// {\r\n//     \"id\": 1,\r\n//     \"image\": \"https://gyazo.com/49e25be87b1fb5e65e02717afc4b6048.png\",\r\n//     \"role\": \"Hokage\",\r\n//     \"name\": \"Tsunade Senju\",\r\n//     \"email\": \"Senju@emailthis.com\",\r\n//     \"village\": \"Konohagakure\"\r\n//   },\r\n","import React from 'react';\r\nimport Tables from 'react-bootstrap/Table';\r\nimport TableData from './TableData';\r\nimport TableHeader from './TableHeader';\r\nimport '../App.css';\r\n\r\nclass Table extends React.Component {\r\n  render() {\r\n    return (\r\n      <Tables\r\n        striped\r\n        bordered\r\n        hover\r\n        variant='dark'\r\n        className='table-responsive'\r\n      >\r\n        <TableHeader />\r\n\r\n        <TableData />\r\n      </Tables>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n// trying to push to github\r\n","import React from 'react';\r\n// import Ninjas from '../data/employeeData.json';\r\n\r\nclass Search extends React.Component {\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className='form-group align-items-center'>\r\n          <label htmlFor='search'>Search For a Ninja</label>\r\n          <input\r\n            onChange={this.props.handleInputChange}\r\n            value={this.props.search}\r\n            name='search'\r\n            type='text'\r\n            className='form-control'\r\n            placeholder='Search'\r\n            id='search'\r\n            style={{ textAlign: 'center' }}\r\n          />\r\n          <br />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Table from './components/Table';\nimport Search from './components/Search';\nimport data from './data/employeeData.json';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass App extends React.Component {\n  state = {\n    search: '',\n  };\n  handleInputChange = (event) => {\n    this.setState({ search: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <Header />\n        <Search\n          handleInputChange={this.handleInputChange}\n          search={this.state.search}\n        />\n        <Container className='wrapper'>\n          <Row>\n            <Col>\n              <Table data={data} search={this.state.search} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}